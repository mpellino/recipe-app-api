version: "3.9"

services:
  app:
    build:
      context: .
      args:
        - DEV=true 
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme


volumes:
  dev-db-data:

# Docker Compose Configuration Explanation:


# This `docker-compose.yml` file defines two services: `app` and `db`.
# The `app` service is built from the current directory and has an environment 
# variable `DEV` set to `true`. It exposes port 8000 and mounts the local `./app` 
# directory to the `/app` directory in the container. It also depends on the `db` service.
# The `db` service uses the `postgres:13-alpine` image and mounts the named volume 
# `dev-db-data` to the `/var/lib/postgres/data` directory in the container. 
# It also sets a few environment variables for the PostgreSQL database.
# The `volumes` section defines the named volume `dev-db-data` used by the `db` service.


# - `version: "3.9"`: Specifies the version of Docker Compose syntax being used, ensuring compatibility.
#
# - `services:`: Defines a set of services (containers) to be managed by Docker Compose.
#
# - `app:`: The name of the service defined in this configuration, which corresponds to the Dockerfile service name.
#
#   - `build:`: Specifies how to build the Docker image for this service.
#     - `context: .`: Sets the build context to the current directory (where the Dockerfile is located).
#     - Sets: the build argument to be in development mode.
#     DEV=true, this overwrite the Dockerfile arg=false when we run it with this compose configuration. Basically, by default we are not running it in dev mode   
#- `ports:`: Maps the container's port 8000 to the host machine's port 8000, enabling access to the Django app.
#     - `"8000:8000"`: Exposes port 8000 on the host machine and forwards traffic to port 8000 in the container.
#
#   - `volumes:`: Mounts a host directory (./app) as a volume inside the container (/app).
#     - `./app:/app`: Syncs changes made locally (in ./app) with the container's /app directory, allowing live updates.
#
#   - `command:`: Overrides the default command specified in the Dockerfile, running Django's development server.
#     - `sh -c "python manage.py runserver 0.0.0.0:8000"`: Starts Django's development server, binding to all interfaces (0.0.0.0) on port 8000.
#
#   - `environment:`: Sets environment variables used within the app service.
#     - `DB_HOST=db`: Specifies the hostname for the database service.
#     - `DB_NAME=devdb`: Specifies the database name used by the app.
#     - `DB_USER=devuser`: Specifies the database username used by the app.
#     - `DB_PASS=changeme`: Specifies the database password used by the app.
#
#   - `depends_on:`: Establishes service dependencies, ensuring the db service starts before the app service.
#     - `db`: Ensures the database service (db) is started before the app service.
#
# - `db:`: Defines the PostgreSQL database service.
#   - `image: postgres:13-alpine`: Specifies the Docker image to use for the database service.
#   - `volumes:`: Mounts a named volume for persistent database storage.
#     - `dev-db-data:/var/lib/postgres/data`: Maps the named volume to the PostgreSQL data directory.
#   - `environment:`: Sets environment variables for PostgreSQL configuration.
#     - `POSTGRES_DB=devdb`: Specifies the default database name.
#     - `POSTGRES_USER=devuser`: Specifies the default database username.
#     - `POSTGRES_PASSWORD=changeme`: Specifies the default database password.
#
# - `volumes:`: Defines named volumes for persistent storage.
#   - `dev-db-data:`: Defines a named volume for PostgreSQL data storage.
#
# To build and run the Docker container using this configuration, execute:
#   docker-compose build  # Builds the Docker image using the defined Dockerfile and configuration.
#   docker-compose up     # Starts the Docker container based on the configured services.